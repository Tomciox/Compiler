/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include "Absyn.H"
int yyparse(void);
int yylex(void);
int yy_mylinenumber;
int initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  std::cout << "line " << yy_mylinenumber + 1 << std::endl ;
  fprintf(stderr,"error: %s\n",str);
}


Program* YY_RESULT_Program_ = 0;
Program* pProgram(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}

TopDef* YY_RESULT_TopDef_ = 0;
TopDef* pTopDef(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TopDef_;
  }
}

ListTopDef* YY_RESULT_ListTopDef_ = 0;
ListTopDef* pListTopDef(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListTopDef_;
  }
}

Arg* YY_RESULT_Arg_ = 0;
Arg* pArg(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Arg_;
  }
}

ListArg* YY_RESULT_ListArg_ = 0;
ListArg* pListArg(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListArg_;
  }
}

Block* YY_RESULT_Block_ = 0;
Block* pBlock(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Block_;
  }
}

ListStmt* YY_RESULT_ListStmt_ = 0;
ListStmt* pListStmt(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStmt_;
  }
}

Stmt* YY_RESULT_Stmt_ = 0;
Stmt* pStmt(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stmt_;
  }
}

Item* YY_RESULT_Item_ = 0;
Item* pItem(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Item_;
  }
}

ListItem* YY_RESULT_ListItem_ = 0;
ListItem* pListItem(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListItem_;
  }
}

Type* YY_RESULT_Type_ = 0;
Type* pType(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}

ListType* YY_RESULT_ListType_ = 0;
ListType* pListType(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListType_;
  }
}

Expr* YY_RESULT_Expr_ = 0;
Expr* pExpr(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}

ListExpr* YY_RESULT_ListExpr_ = 0;
ListExpr* pListExpr(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpr_;
  }
}

AddOp* YY_RESULT_AddOp_ = 0;
AddOp* pAddOp(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_AddOp_;
  }
}

MulOp* YY_RESULT_MulOp_ = 0;
MulOp* pMulOp(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_MulOp_;
  }
}

RelOp* YY_RESULT_RelOp_ = 0;
RelOp* pRelOp(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RelOp_;
  }
}


ListTopDef* reverseListTopDef(ListTopDef *l)
{
  ListTopDef *prev = 0;
  ListTopDef *tmp = 0;
  while (l)
  {
    tmp = l->listtopdef_;
    l->listtopdef_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListArg* reverseListArg(ListArg *l)
{
  ListArg *prev = 0;
  ListArg *tmp = 0;
  while (l)
  {
    tmp = l->listarg_;
    l->listarg_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListStmt* reverseListStmt(ListStmt *l)
{
  ListStmt *prev = 0;
  ListStmt *tmp = 0;
  while (l)
  {
    tmp = l->liststmt_;
    l->liststmt_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListItem* reverseListItem(ListItem *l)
{
  ListItem *prev = 0;
  ListItem *tmp = 0;
  while (l)
  {
    tmp = l->listitem_;
    l->listitem_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListType* reverseListType(ListType *l)
{
  ListType *prev = 0;
  ListType *tmp = 0;
  while (l)
  {
    tmp = l->listtype_;
    l->listtype_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListExpr* reverseListExpr(ListExpr *l)
{
  ListExpr *prev = 0;
  ListExpr *tmp = 0;
  while (l)
  {
    tmp = l->listexpr_;
    l->listexpr_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}

%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Program* program_;
  TopDef* topdef_;
  ListTopDef* listtopdef_;
  Arg* arg_;
  ListArg* listarg_;
  Block* block_;
  ListStmt* liststmt_;
  Stmt* stmt_;
  Item* item_;
  ListItem* listitem_;
  Type* type_;
  ListType* listtype_;
  Expr* expr_;
  ListExpr* listexpr_;
  AddOp* addop_;
  MulOp* mulop_;
  RelOp* relop_;

}

%token _ERROR_
%token _SYMB_0    //   (
%token _SYMB_1    //   )
%token _SYMB_2    //   ,
%token _SYMB_3    //   {
%token _SYMB_4    //   }
%token _SYMB_5    //   ;
%token _SYMB_6    //   =
%token _SYMB_7    //   ++
%token _SYMB_8    //   --
%token _SYMB_9    //   -
%token _SYMB_10    //   !
%token _SYMB_11    //   &&
%token _SYMB_12    //   ||
%token _SYMB_13    //   +
%token _SYMB_14    //   *
%token _SYMB_15    //   /
%token _SYMB_16    //   %
%token _SYMB_17    //   <
%token _SYMB_18    //   <=
%token _SYMB_19    //   >
%token _SYMB_20    //   >=
%token _SYMB_21    //   ==
%token _SYMB_22    //   !=
%token _SYMB_23    //   boolean
%token _SYMB_24    //   else
%token _SYMB_25    //   false
%token _SYMB_26    //   if
%token _SYMB_27    //   int
%token _SYMB_28    //   return
%token _SYMB_29    //   string
%token _SYMB_30    //   true
%token _SYMB_31    //   void
%token _SYMB_32    //   while

%type <program_> Program
%type <topdef_> TopDef
%type <listtopdef_> ListTopDef
%type <arg_> Arg
%type <listarg_> ListArg
%type <block_> Block
%type <liststmt_> ListStmt
%type <stmt_> Stmt
%type <item_> Item
%type <listitem_> ListItem
%type <type_> Type
%type <listtype_> ListType
%type <expr_> Expr6
%type <expr_> Expr5
%type <expr_> Expr4
%type <expr_> Expr3
%type <expr_> Expr2
%type <expr_> Expr1
%type <expr_> Expr
%type <listexpr_> ListExpr
%type <addop_> AddOp
%type <mulop_> MulOp
%type <relop_> RelOp

%token<string_> _STRING_
%token<int_> _INTEGER_
%token<string_> _IDENT_

%%
Program : ListTopDef { $$ = new Prog($1); YY_RESULT_Program_= $$; } 
;
TopDef : Type _IDENT_ _SYMB_0 ListArg _SYMB_1 Block { $$ = new FnDef($1, $2, $4, $6);  } 
;
ListTopDef : TopDef { $$ = new ListTopDef($1);  } 
  | TopDef ListTopDef { $$ = new ListTopDef($1, $2);  }
;
Arg : Type _IDENT_ { $$ = new Ar($1, $2);  } 
;
ListArg : /* empty */ { $$ = 0;  } 
  | Arg { $$ = new ListArg($1);  }
  | Arg _SYMB_2 ListArg { $$ = new ListArg($1, $3);  }
;
Block : _SYMB_3 ListStmt _SYMB_4 { $$ = new Blk(reverseListStmt($2));  } 
;
ListStmt : /* empty */ { $$ = 0;  } 
  | ListStmt Stmt { $$ = new ListStmt($2, $1);  }
;
Stmt : _SYMB_5 { $$ = new Empty();  } 
  | Block { $$ = new BStmt($1);  }
  | Type ListItem _SYMB_5 { $$ = new Decl($1, $2);  }
  | _IDENT_ _SYMB_6 Expr _SYMB_5 { $$ = new Ass($1, $3);  }
  | _IDENT_ _SYMB_7 _SYMB_5 { $$ = new Incr($1);  }
  | _IDENT_ _SYMB_8 _SYMB_5 { $$ = new Decr($1);  }
  | _SYMB_28 Expr _SYMB_5 { $$ = new Ret($2);  }
  | _SYMB_28 _SYMB_5 { $$ = new VRet();  }
  | _SYMB_26 _SYMB_0 Expr _SYMB_1 Stmt { $$ = new Cond($3, $5);  }
  | _SYMB_26 _SYMB_0 Expr _SYMB_1 Stmt _SYMB_24 Stmt { $$ = new CondElse($3, $5, $7);  }
  | _SYMB_32 _SYMB_0 Expr _SYMB_1 Stmt { $$ = new While($3, $5);  }
  | Expr _SYMB_5 { $$ = new SExp($1);  }
;
Item : _IDENT_ { $$ = new NoInit($1);  } 
  | _IDENT_ _SYMB_6 Expr { $$ = new Init($1, $3);  }
;
ListItem : Item { $$ = new ListItem($1);  } 
  | Item _SYMB_2 ListItem { $$ = new ListItem($1, $3);  }
;
Type : _SYMB_27 { $$ = new Int();  } 
  | _SYMB_29 { $$ = new Str();  }
  | _SYMB_23 { $$ = new Bool();  }
  | _SYMB_31 { $$ = new Void();  }
;
ListType : /* empty */ { $$ = 0;  } 
  | Type { $$ = new ListType($1);  }
  | Type _SYMB_2 ListType { $$ = new ListType($1, $3);  }
;
Expr6 : _IDENT_ { $$ = new EVar($1);  } 
  | _INTEGER_ { $$ = new ELitInt($1);  }
  | _SYMB_30 { $$ = new ELitTrue();  }
  | _SYMB_25 { $$ = new ELitFalse();  }
  | _IDENT_ _SYMB_0 ListExpr _SYMB_1 { $$ = new EApp($1, $3);  }
  | _STRING_ { $$ = new EString($1);  }
  | _SYMB_0 Expr _SYMB_1 { $$ = $2;  }
;
Expr5 : _SYMB_9 Expr6 { $$ = new Neg($2);  } 
  | _SYMB_10 Expr6 { $$ = new Not($2);  }
  | Expr6 { $$ = $1;  }
;
Expr4 : Expr4 MulOp Expr5 { $$ = new EMul($1, $2, $3);  } 
  | Expr5 { $$ = $1;  }
;
Expr3 : Expr3 AddOp Expr4 { $$ = new EAdd($1, $2, $3);  } 
  | Expr4 { $$ = $1;  }
;
Expr2 : Expr2 RelOp Expr3 { $$ = new ERel($1, $2, $3);  } 
  | Expr3 { $$ = $1;  }
;
Expr1 : Expr2 _SYMB_11 Expr1 { $$ = new EAnd($1, $3);  } 
  | Expr2 { $$ = $1;  }
;
Expr : Expr1 _SYMB_12 Expr { $$ = new EOr($1, $3);  } 
  | Expr1 { $$ = $1;  }
;
ListExpr : /* empty */ { $$ = 0;  } 
  | Expr { $$ = new ListExpr($1);  }
  | Expr _SYMB_2 ListExpr { $$ = new ListExpr($1, $3);  }
;
AddOp : _SYMB_13 { $$ = new Plus();  } 
  | _SYMB_9 { $$ = new Minus();  }
;
MulOp : _SYMB_14 { $$ = new Times();  } 
  | _SYMB_15 { $$ = new Div();  }
  | _SYMB_16 { $$ = new Mod();  }
;
RelOp : _SYMB_17 { $$ = new LTH();  } 
  | _SYMB_18 { $$ = new LE();  }
  | _SYMB_19 { $$ = new GTH();  }
  | _SYMB_20 { $$ = new GE();  }
  | _SYMB_21 { $$ = new EQU();  }
  | _SYMB_22 { $$ = new NE();  }
;

